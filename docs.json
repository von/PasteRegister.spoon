[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "name" : "queryAndLoadPasteBuffer",
        "stripped_doc" : [
          "Ask the user to select a register and load the paste buffer",
          "from that register.",
          ""
        ],
        "doc" : "Ask the user to select a register and load the paste buffer\nfrom that register.\n\nParameters:\n* None\n\nReturns:\n* True if the operation succeeded, otherwise false",
        "def" : "PasteRegister:queryAndLoadPasteBuffer()",
        "notes" : [

        ],
        "signature" : "PasteRegister:queryAndLoadPasteBuffer()",
        "type" : "Function",
        "returns" : [
          "* True if the operation succeeded, otherwise false"
        ],
        "desc" : "Ask the user to select a register and load the paste buffer",
        "parameters" : [
          "* None",
          ""
        ]
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Allow the saving of the pastebuffer to registers identified by",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Allow the saving of the pastebuffer to registers identified by\nletters of the alphabet, and sequently loading it from those\nregisters.",
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "name" : "queryAndLoadPasteBuffer",
        "stripped_doc" : [
          "Ask the user to select a register and load the paste buffer",
          "from that register.",
          ""
        ],
        "doc" : "Ask the user to select a register and load the paste buffer\nfrom that register.\n\nParameters:\n* None\n\nReturns:\n* True if the operation succeeded, otherwise false",
        "def" : "PasteRegister:queryAndLoadPasteBuffer()",
        "notes" : [

        ],
        "signature" : "PasteRegister:queryAndLoadPasteBuffer()",
        "type" : "Function",
        "returns" : [
          "* True if the operation succeeded, otherwise false"
        ],
        "desc" : "Ask the user to select a register and load the paste buffer",
        "parameters" : [
          "* None",
          ""
        ]
      },
      {
        "name" : "bindHotKeys",
        "stripped_doc" : [
          "Accepts a table of key bindings, e.g.:",
          "  {",
          "    chooser = {{\"cmd\", \"alt\"}, \"c\"},",
          "    load = {{\"cmd\", \"alt\"}, \"l\"},",
          "    paste = {{\"cmd\", \"alt\"}, \"p\"},",
          "    save = {{\"cmd\", \"alt\"}, \"s\"}",
          "  }",
          ""
        ],
        "doc" : "Accepts a table of key bindings, e.g.:\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    load = {{\"cmd\", \"alt\"}, \"l\"},\n    paste = {{\"cmd\", \"alt\"}, \"p\"},\n    save = {{\"cmd\", \"alt\"}, \"s\"}\n  }\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * PasteRegister object",
        "def" : "PasteRegister:bindHotKeys(table)",
        "notes" : [

        ],
        "signature" : "PasteRegister:bindHotKeys(table)",
        "type" : "Method",
        "returns" : [
          " * PasteRegister object"
        ],
        "desc" : "Accepts a table of key bindings, e.g.:",
        "parameters" : [
          " * table - Table of action to key mappings",
          ""
        ]
      },
      {
        "name" : "chooser",
        "stripped_doc" : [
          "Open a hs.chooser instance with registers that have content.",
          ""
        ],
        "doc" : "Open a hs.chooser instance with registers that have content.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "def" : "PasteRegister:chooser()",
        "notes" : [

        ],
        "signature" : "PasteRegister:chooser()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "desc" : "Open a hs.chooser instance with registers that have content.",
        "parameters" : [
          "* None",
          ""
        ]
      },
      {
        "name" : "debug",
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "def" : "PasteRegister:debug()",
        "notes" : [

        ],
        "signature" : "PasteRegister:debug()",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "desc" : "Enable or disable debugging",
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ]
      },
      {
        "name" : "init",
        "stripped_doc" : [
          "Initializes a PasteRegister",
          "When a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua",
          "from the relevant s.",
          "Do generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.",
          "in the main scope of your init.lua. Instead, it should simply prepare an object",
          "with methods to be used later, then return the object.",
          ""
        ],
        "doc" : "Initializes a PasteRegister\nWhen a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.\n\nParameters:\n * None\n\nReturns:\n * PasteRegister object",
        "def" : "PasteRegister:init()",
        "notes" : [

        ],
        "signature" : "PasteRegister:init()",
        "type" : "Method",
        "returns" : [
          " * PasteRegister object"
        ],
        "desc" : "Initializes a PasteRegister",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "queryAndPasteRegister",
        "stripped_doc" : [
          "Ask the user to select a register and then paste that register's",
          "contents directly (via keyStrokes())",
          ""
        ],
        "doc" : "Ask the user to select a register and then paste that register's\ncontents directly (via keyStrokes())\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "def" : "PasteRegister.queryAndPasteRegister()",
        "notes" : [

        ],
        "signature" : "PasteRegister.queryAndPasteRegister()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "desc" : "Ask the user to select a register and then paste that register's",
        "parameters" : [
          "* None",
          ""
        ]
      },
      {
        "name" : "queryAndSavePasteBuffer",
        "stripped_doc" : [
          "Ask the user to select a register and save the paste buffer",
          "to that register.",
          ""
        ],
        "doc" : "Ask the user to select a register and save the paste buffer\nto that register.\n\nParameters:\n* None\n\nReturns:\n* True if the operation succeeded, otherwise false",
        "def" : "PasteRegister:queryAndSavePasteBuffer()",
        "notes" : [

        ],
        "signature" : "PasteRegister:queryAndSavePasteBuffer()",
        "type" : "Method",
        "returns" : [
          "* True if the operation succeeded, otherwise false"
        ],
        "desc" : "Ask the user to select a register and save the paste buffer",
        "parameters" : [
          "* None",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "name" : "init",
        "stripped_doc" : [
          "Initializes a PasteRegister",
          "When a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua",
          "from the relevant s.",
          "Do generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.",
          "in the main scope of your init.lua. Instead, it should simply prepare an object",
          "with methods to be used later, then return the object.",
          ""
        ],
        "doc" : "Initializes a PasteRegister\nWhen a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.\n\nParameters:\n * None\n\nReturns:\n * PasteRegister object",
        "def" : "PasteRegister:init()",
        "notes" : [

        ],
        "signature" : "PasteRegister:init()",
        "type" : "Method",
        "returns" : [
          " * PasteRegister object"
        ],
        "desc" : "Initializes a PasteRegister",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "debug",
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "def" : "PasteRegister:debug()",
        "notes" : [

        ],
        "signature" : "PasteRegister:debug()",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "desc" : "Enable or disable debugging",
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ]
      },
      {
        "name" : "bindHotKeys",
        "stripped_doc" : [
          "Accepts a table of key bindings, e.g.:",
          "  {",
          "    chooser = {{\"cmd\", \"alt\"}, \"c\"},",
          "    load = {{\"cmd\", \"alt\"}, \"l\"},",
          "    paste = {{\"cmd\", \"alt\"}, \"p\"},",
          "    save = {{\"cmd\", \"alt\"}, \"s\"}",
          "  }",
          ""
        ],
        "doc" : "Accepts a table of key bindings, e.g.:\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    load = {{\"cmd\", \"alt\"}, \"l\"},\n    paste = {{\"cmd\", \"alt\"}, \"p\"},\n    save = {{\"cmd\", \"alt\"}, \"s\"}\n  }\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * PasteRegister object",
        "def" : "PasteRegister:bindHotKeys(table)",
        "notes" : [

        ],
        "signature" : "PasteRegister:bindHotKeys(table)",
        "type" : "Method",
        "returns" : [
          " * PasteRegister object"
        ],
        "desc" : "Accepts a table of key bindings, e.g.:",
        "parameters" : [
          " * table - Table of action to key mappings",
          ""
        ]
      },
      {
        "name" : "queryAndSavePasteBuffer",
        "stripped_doc" : [
          "Ask the user to select a register and save the paste buffer",
          "to that register.",
          ""
        ],
        "doc" : "Ask the user to select a register and save the paste buffer\nto that register.\n\nParameters:\n* None\n\nReturns:\n* True if the operation succeeded, otherwise false",
        "def" : "PasteRegister:queryAndSavePasteBuffer()",
        "notes" : [

        ],
        "signature" : "PasteRegister:queryAndSavePasteBuffer()",
        "type" : "Method",
        "returns" : [
          "* True if the operation succeeded, otherwise false"
        ],
        "desc" : "Ask the user to select a register and save the paste buffer",
        "parameters" : [
          "* None",
          ""
        ]
      },
      {
        "name" : "queryAndPasteRegister",
        "stripped_doc" : [
          "Ask the user to select a register and then paste that register's",
          "contents directly (via keyStrokes())",
          ""
        ],
        "doc" : "Ask the user to select a register and then paste that register's\ncontents directly (via keyStrokes())\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "def" : "PasteRegister.queryAndPasteRegister()",
        "notes" : [

        ],
        "signature" : "PasteRegister.queryAndPasteRegister()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "desc" : "Ask the user to select a register and then paste that register's",
        "parameters" : [
          "* None",
          ""
        ]
      },
      {
        "name" : "chooser",
        "stripped_doc" : [
          "Open a hs.chooser instance with registers that have content.",
          ""
        ],
        "doc" : "Open a hs.chooser instance with registers that have content.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "def" : "PasteRegister:chooser()",
        "notes" : [

        ],
        "signature" : "PasteRegister:chooser()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "desc" : "Open a hs.chooser instance with registers that have content.",
        "parameters" : [
          "* None",
          ""
        ]
      }
    ],
    "name" : "PasteRegister"
  }
]
