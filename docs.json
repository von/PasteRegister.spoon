[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "PasteRegister:bindHotKeys(table)",
        "desc": "Accepts a table of key bindings, e.g.:",
        "doc": "Accepts a table of key bindings, e.g.:\n\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    load = {{\"cmd\", \"alt\"}, \"l\"},\n    paste = {{\"cmd\", \"alt\"}, \"p\"},\n    save = {{\"cmd\", \"alt\"}, \"s\"}\n  }\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * PasteRegister object",
        "name": "bindHotKeys",
        "parameters": [
          " * table - Table of action to key mappings"
        ],
        "returns": [
          " * PasteRegister object"
        ],
        "signature": "PasteRegister:bindHotKeys(table)",
        "stripped_doc": "  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    load = {{\"cmd\", \"alt\"}, \"l\"},\n    paste = {{\"cmd\", \"alt\"}, \"p\"},\n    save = {{\"cmd\", \"alt\"}, \"s\"}\n  }",
        "type": "Function"
      },
      {
        "def": "PasteRegister:chooser()",
        "desc": "Open a hs.chooser instance with registers that have content.",
        "doc": "Open a hs.chooser instance with registers that have content.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "chooser",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "PasteRegister:chooser()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "PasteRegister:debug()",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "PasteRegister:debug()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "PasteRegister:init()",
        "desc": "Initializes a PasteRegister",
        "doc": "Initializes a PasteRegister\n\nParameters:\n * None\n\nReturns:\n * PasteRegister object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * PasteRegister object"
        ],
        "signature": "PasteRegister:init()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "PasteRegister:queryAndLoadPasteBuffer()",
        "desc": "Ask the user to select a register and load the paste buffer",
        "doc": "Ask the user to select a register and load the paste buffer\nfrom that register.\n\nParameters:\n* None\n\nReturns:\n* True if the operation succeeded, otherwise false",
        "name": "queryAndLoadPasteBuffer",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* True if the operation succeeded, otherwise false"
        ],
        "signature": "PasteRegister:queryAndLoadPasteBuffer()",
        "stripped_doc": "from that register.",
        "type": "Function"
      },
      {
        "def": "PasteRegister.queryAndPasteRegister()",
        "desc": "Ask the user to select a register and then paste that register's",
        "doc": "Ask the user to select a register and then paste that register's\ncontents directly (via keyStrokes())\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "queryAndPasteRegister",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "PasteRegister.queryAndPasteRegister()",
        "stripped_doc": "contents directly (via keyStrokes())",
        "type": "Function"
      },
      {
        "def": "PasteRegister:queryAndSavePasteBuffer()",
        "desc": "Ask the user to select a register and save the paste buffer",
        "doc": "Ask the user to select a register and save the paste buffer\nto that register.\n\nParameters:\n* None\n\nReturns:\n* True if the operation succeeded, otherwise false",
        "name": "queryAndSavePasteBuffer",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* True if the operation succeeded, otherwise false"
        ],
        "signature": "PasteRegister:queryAndSavePasteBuffer()",
        "stripped_doc": "to that register.",
        "type": "Function"
      }
    ],
    "Method": [],
    "Variable": [],
    "desc": "Allow the saving of the pastebuffer to registers identified by",
    "doc": "Allow the saving of the pastebuffer to registers identified by\nletters of the alphabet, and sequently loading it from those\nregisters.",
    "items": [
      {
        "def": "PasteRegister:bindHotKeys(table)",
        "desc": "Accepts a table of key bindings, e.g.:",
        "doc": "Accepts a table of key bindings, e.g.:\n\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    load = {{\"cmd\", \"alt\"}, \"l\"},\n    paste = {{\"cmd\", \"alt\"}, \"p\"},\n    save = {{\"cmd\", \"alt\"}, \"s\"}\n  }\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * PasteRegister object",
        "name": "bindHotKeys",
        "parameters": [
          " * table - Table of action to key mappings"
        ],
        "returns": [
          " * PasteRegister object"
        ],
        "signature": "PasteRegister:bindHotKeys(table)",
        "stripped_doc": "  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    load = {{\"cmd\", \"alt\"}, \"l\"},\n    paste = {{\"cmd\", \"alt\"}, \"p\"},\n    save = {{\"cmd\", \"alt\"}, \"s\"}\n  }",
        "type": "Function"
      },
      {
        "def": "PasteRegister:chooser()",
        "desc": "Open a hs.chooser instance with registers that have content.",
        "doc": "Open a hs.chooser instance with registers that have content.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "chooser",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "PasteRegister:chooser()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "PasteRegister:debug()",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "PasteRegister:debug()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "PasteRegister:init()",
        "desc": "Initializes a PasteRegister",
        "doc": "Initializes a PasteRegister\n\nParameters:\n * None\n\nReturns:\n * PasteRegister object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * PasteRegister object"
        ],
        "signature": "PasteRegister:init()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "PasteRegister:queryAndLoadPasteBuffer()",
        "desc": "Ask the user to select a register and load the paste buffer",
        "doc": "Ask the user to select a register and load the paste buffer\nfrom that register.\n\nParameters:\n* None\n\nReturns:\n* True if the operation succeeded, otherwise false",
        "name": "queryAndLoadPasteBuffer",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* True if the operation succeeded, otherwise false"
        ],
        "signature": "PasteRegister:queryAndLoadPasteBuffer()",
        "stripped_doc": "from that register.",
        "type": "Function"
      },
      {
        "def": "PasteRegister.queryAndPasteRegister()",
        "desc": "Ask the user to select a register and then paste that register's",
        "doc": "Ask the user to select a register and then paste that register's\ncontents directly (via keyStrokes())\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "queryAndPasteRegister",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "PasteRegister.queryAndPasteRegister()",
        "stripped_doc": "contents directly (via keyStrokes())",
        "type": "Function"
      },
      {
        "def": "PasteRegister:queryAndSavePasteBuffer()",
        "desc": "Ask the user to select a register and save the paste buffer",
        "doc": "Ask the user to select a register and save the paste buffer\nto that register.\n\nParameters:\n* None\n\nReturns:\n* True if the operation succeeded, otherwise false",
        "name": "queryAndSavePasteBuffer",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* True if the operation succeeded, otherwise false"
        ],
        "signature": "PasteRegister:queryAndSavePasteBuffer()",
        "stripped_doc": "to that register.",
        "type": "Function"
      }
    ],
    "name": "PasteRegister",
    "stripped_doc": "letters of the alphabet, and sequently loading it from those\nregisters.",
    "submodules": [],
    "type": "Module"
  }
]